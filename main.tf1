# https://medium.com/@subhampradhan966/a-comprehensive-step-by-step-guide-for-setting-up-aws-site-to-site-vpn-connection-119d9daaa6f3
data "http" "myip" {
  url = "https://ipv4.icanhazip.com"
}
locals {
  tags = {
    Environment = "${var.environment}"
    Project     = "${var.project}"
    CreatedOn   = formatdate("YYYY-MM-DD hh:mm:ss ZZZ", timestamp())
  }
  myIp          = "${chomp(data.http.myip.response_body)}"
}

module "vpc-Israel" {
  source = "./.modules/vpc"
  env_name = "cnd46-Israel"
  cidr_block = "10.0.0.0/16"
  myIp = local.myIp
  project = var.project
  environment = var.environment
  aws_region = "il-central-1" #Israel (Tel Aviv)
} # Create VPC in Israel with 6 subnets (Public, Private, DB), NGW and IWG
module "vpc-EU" {
  source = "./.modules/vpc"
  env_name = "cnd46-Ireland"
  cidr_block = "10.1.0.0/16"
  myIp = local.myIp
  project = var.project
  environment = var.environment
  aws_region =  "eu-central-1" #Europe (Frankfurt)
}    # Create VPC in Israel with 6 subnets (Public, Private, DB), NGW and IWG

# Eu     cidr_block = "10.1.0.0/16"
# Israel cidr_block = "10.0.0.0/16"
#Israel
resource "aws_vpn_gateway" "vpn-gw-Israel" {
  provider = aws.Israel
  vpc_id = module.vpc-Israel.vpc_id
  availability_zone = module.vpc-Israel.availability_zones[0]
  lifecycle {ignore_changes = [tags]}
  amazon_side_asn = 64512
  tags = merge(
    local.tags,
    {Name        = "${var.project}-vgw-Israel-${var.environment}" }
  )
} # Virtual private gateway in Israel
resource "aws_customer_gateway" "cgw-inEU-tmp" {
  provider = aws.Israel
  bgp_asn    = 64555
  ip_address = aws_vpn_connection.vpn_connection-fromEU.tunnel1_address #"172.83.124.10"
  type       = "ipsec.1"
  tags = merge(
  local.tags,
  {Name        = "${var.project}-cgw-inEU-tmp${var.environment}" }
  )
}
resource "aws_vpn_connection" "vpn-TelAviv-to-Frankfurt" {
  provider = aws.Israel
  customer_gateway_id                     = aws_customer_gateway.cgw-inEU-tmp.id
  vpn_gateway_id                          = aws_vpn_gateway.vpn-gw-Israel.id
  type                                    = "ipsec.1"
  static_routes_only                      = true
  local_ipv4_network_cidr                 = "10.0.0.0/16"
  outside_ip_address_type                 = null
  remote_ipv4_network_cidr                = "10.1.0.0/16" #CIDR in EU
  //transport_transit_gateway_attachment_id = var.vpn_connection_transport_transit_gateway_attachment_id
  //enable_acceleration      = var.vpn_connection_transit_gateway_id != null ? var.vpn_connection_enable_acceleration : null
  tags = merge(
    local.tags,
    {Name        = "${var.project}-vpn-inTelAviv-tmp-${var.environment}" }
  )
}
resource "aws_route" "route-tel-aviv" {
  count = length(module.vpc-Israel.public_routing_tables)
  provider = aws.Israel
  route_table_id = module.vpc-Israel.public_routing_tables[count.index].id
  destination_cidr_block = module.vpc-EU.vpc_cidr
  gateway_id = aws_vpn_gateway.vpn-gw-Israel.id

}
resource "aws_vpn_gateway_route_propagation" "Israel" {
  count = length(module.vpc-Israel.public_routing_tables)
  provider = aws.Israel
  vpn_gateway_id = aws_vpn_gateway.vpn-gw-Israel.id
  route_table_id = module.vpc-Israel.public_routing_tables[count.index].id
}

#Frankfurt
resource "aws_vpn_gateway" "vpn_gw-EU" {
  provider = aws.EU
  amazon_side_asn = 64555
  vpc_id = module.vpc-EU.vpc_id
  availability_zone =  module.vpc-EU.availability_zones[0]
  lifecycle {ignore_changes = [tags]}
  tags = merge(
  local.tags,
  {Name        = "${var.project}-vgw-EU-${var.environment}" }
  )
} # Virtual private gateway in EU
resource "aws_customer_gateway" "cgw-inTelAviv" {
  provider = aws.EU
  bgp_asn = 64512
  ip_address = "172.83.124.10" #aws_vpn_connection.vpn_connection-fromTelAviv.tunnel1_address
  # tmp-ip
  type = "ipsec.1"
  tags = merge(
    local.tags,
    {Name        = "${var.project}-cgw-EU-${var.environment}" }
  )

}
resource "aws_vpn_connection" "vpn_connection-fromEU" {
  provider = aws.EU
  customer_gateway_id                     = aws_customer_gateway.cgw-inTelAviv.id
  vpn_gateway_id                          = aws_vpn_gateway.vpn_gw-EU.id
  type                                    = "ipsec.1"
  static_routes_only                      = true
  local_ipv4_network_cidr                 = "10.1.0.0/16"
  outside_ip_address_type                 = null
  remote_ipv4_network_cidr                = "10.0.0.0/16" #CIDR in Israel
  //transport_transit_gateway_attachment_id = var.vpn_connection_transport_transit_gateway_attachment_id
  //enable_acceleration      = var.vpn_connection_transit_gateway_id != null ? var.vpn_connection_enable_acceleration : null
  tags = merge(
  local.tags,
  {Name        = "${var.project}-vpn-EU-${var.environment}" }
  )
}
resource "aws_route" "route-eu" {
  count = length(module.vpc-Israel.public_routing_tables)
  provider = aws.EU
  route_table_id = module.vpc-EU.public_routing_tables[count.index].id
  destination_cidr_block = module.vpc-Israel.vpc_cidr
  gateway_id = aws_vpn_gateway.vpn_gw-EU.id
}
resource "aws_vpn_gateway_route_propagation" "EU" {
  count = length(module.vpc-EU.public_routing_tables)
  provider = aws.EU
  vpn_gateway_id = aws_vpn_gateway.vpn_gw-EU.id
  route_table_id = module.vpc-EU.public_routing_tables[count.index].id
}

output "abc" {
        value= aws_vpn_connection.vpn-TelAviv-to-Frankfurt.tunnel1_address
}
module "ec2-Israel" {
  source = "./.modules/ec2"
  subnet = module.vpc-Israel.public_subnets[0]
  vpc = module.vpc-Israel.vpc_id
  region = "il"
  aws_region = "il-central-1"
  project = "${var.project}"
}
module "ec2-EU" {
  source = "./.modules/ec2"
  subnet = module.vpc-EU.public_subnets[0]
  vpc = module.vpc-EU.vpc_id
  region = "eu"
  aws_region = "eu-central-1"
  project = "${var.project}"
}
output "amiIsrael" {
  value = module.ec2-Israel.ami
}
output "amiEU" {
  value = module.ec2-EU.ami
}
/*
resource "aws_security_group"     "ec2-bastion-sg" {
  description = "EC2 Bastion Host Security Group"
  name = "${var.project}-ec2-bastion-sg-${var.environment}"
  vpc_id = module.vpc.vpc_id
  ingress {
    description      = "SSH"
    from_port        = 22
    to_port          = 22
    protocol         = "tcp"
    cidr_blocks      = [
      "${local.myIp}/32", // access from my workstation
      // "0.0.0.0/0" //access from anywhere
    ]
    ipv6_cidr_blocks = []
    prefix_list_ids = []
    security_groups = []
    self = false
  }
  egress = [
    {
      description      = "for all outgoing traffics"
      from_port        = 0
      to_port          = 0
      protocol         = "-1"
      cidr_blocks      = ["0.0.0.0/0"]
      ipv6_cidr_blocks = ["::/0"]
      prefix_list_ids = []
      security_groups = []
      self = false
    }
  ]
  tags = merge(
      local.tags,
      {Name = "${var.project}-ec2-bastion-sg-${var.environment}"}
  )
}
resource "aws_instance"           "ec2-bastion-host" {
  ami = "ami-05750b0b9aee2c149"
  instance_type = "t3.small"
  key_name = aws_key_pair.generated_key.key_name
  vpc_security_group_ids = [aws_security_group.ec2-bastion-sg.id]
  subnet_id =  module.vpc.public_subnets[0]  //  aws_subnet.vpc-public-subnet-2.id
  associate_public_ip_address = false
  user_data                   = file("/files/bastion_bootstrap.sh")
  root_block_device {
    volume_size = 8
    delete_on_termination = true
    volume_type = "gp2"
    encrypted = true
    tags = {
      Name = "${var.project}-ec2-bastion-host-root-volume-${var.environment}"
    }
  }
  credit_specification {
    cpu_credits = "standard"
  }
  tags = {
    Name = "${var.project}-ec2-bastion-host-${var.environment}"
  }
  lifecycle {
    ignore_changes = [
      associate_public_ip_address,
    ]
  }
}
//https://spacelift.io/blog/terraform-alb
resource "aws_lb"                 "lb" {
  name               = "${var.project}-lb-${var.environment}"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.sg_lb.id]
  subnets            = [for subnet in module.vpc.public_subnets : subnet]

  enable_deletion_protection = false

  access_logs {
    bucket  = aws_s3_bucket.lb_logs.id
    prefix  = "test-lb"
    enabled = true
  }


  tags = merge(
    local.tags,
    {name = "${var.project}-lb-${var.environment}"}
  )
  lifecycle {
    ignore_changes = [
      tags["CreatedOn"],
    ]
  }
}
resource "aws_lb_target_group"    "my_tg_a" { // Target Group A
  name     = "target-group-a"
  port     = 80
  protocol = "HTTP"
  vpc_id   = module.vpc.vpc_id
  tags = merge(
    local.tags,
    {name = "${var.project}-lb-tg"}
  )
  lifecycle {
    ignore_changes = [
      tags["CreatedOn"],
    ]
  }

}
resource "aws_lb_listener"        "my_alb_listener" {
  load_balancer_arn = aws_lb.lb.arn
  port              = "80"
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.my_tg_a.arn
  }
  tags = merge(
    local.tags,
    {name = "${var.project}-alb-listener"}
  )
  lifecycle {
    ignore_changes = [
      tags["CreatedOn"],
    ]
  }

}
resource "aws_lb_listener_rule"   "rule_b" {
  listener_arn = aws_lb_listener.my_alb_listener.arn
  priority     = 60

  action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.my_tg_a.arn
  }

  condition {
    path_pattern {
      values = ["/images*"]
    }
  }
  tags = merge(
    local.tags,
    {name = "${var.project}-lb-listener-rule"}
  )
  lifecycle {
    ignore_changes = [
      tags["CreatedOn"],
    ]
  }

}

resource "aws_lb_target_group_attachment" "tg_attachment_a" {
  target_group_arn = aws_lb_target_group.my_tg_a.arn
  target_id        = aws_instance.instance_a.id
  port             = 80
}

resource "aws_security_group"             "sg_lb" {
    name   = "${var.project}-lb-sg-${var.environment}"
    description = "security group for load balancer"
    vpc_id      = module.vpc.vpc_id
    ingress = [
      {
      description      = "HTTP"
      from_port        = 80
      to_port          = 80
      protocol         = "tcp"
      cidr_blocks      = ["0.0.0.0/0"]
      ipv6_cidr_blocks = []
      prefix_list_ids = []
      security_groups = []
      self = false
    },
    {
      description      = "HTTPS"
      from_port        = 443
      to_port          = 443
      protocol         = "tcp"
      cidr_blocks      = ["0.0.0.0/0"]
      ipv6_cidr_blocks = []
      prefix_list_ids = []
      security_groups = []
      self = false
    }
  ]
  egress = [
      {
        description      = "for all outgoing traffics"
        from_port        = 0
        to_port          = 0
        protocol         = "-1"
        cidr_blocks      = ["0.0.0.0/0"]
        ipv6_cidr_blocks = ["::/0"]
        prefix_list_ids = []
        security_groups = []
        self = false
      }
    ]
  tags = merge(
    local.tags,
    {Name = "${var.project}-lb-sg-${var.environment}"}
  )
  lifecycle {
    create_before_destroy = true
  }
}
resource "tls_private_key"                "private_key" {
  algorithm = "RSA"
  rsa_bits  = 4096
}
resource "aws_key_pair"                   "generated_key" {
  key_name   = "${var.project}-keyPair"
  public_key = tls_private_key.private_key.public_key_openssh
}
resource "local_file"                     "my-keys" {
  content = tls_private_key.private_key.private_key_pem
  filename = "/files/${var.project}-keyPair.pem"
}
data "template_file"                      "user_data" {
  template = file("/files/userData.ps1")
}
*/





# 1. Route 53, ACM, and ALB for HTTPS setup
resource "aws_route53_zone" "lovely_zone" {
    name = "lovelybeauty.com"
}

resource "aws_acm_certificate" "lovely_certificate" {
    domain_name       = "lovelybeauty.com"
    validation_method = "DNS"

    tags = {
        Name = "Lovely SSL Certificate"
    }

    domain_validation_options {
        domain_name       = "lovelybeauty.com"
        validation_domain = aws_route53_zone.lovely_zone.name
    }
}

resource "aws_route53_record" "lovely_certificate_validation" {
    zone_id = aws_route53_zone.lovely_zone.zone_id
    name    = aws_acm_certificate.lovely_certificate.domain_validation_options[0].resource_record_name
    type    = aws_acm_certificate.lovely_certificate.domain_validation_options[0].resource_record_type
    ttl     = 300
    records = [aws_acm_certificate.lovely_certificate.domain_validation_options[0].resource_record_value]
}




resource "aws_lb" "lovely_alb" {
    name               = "lovely-alb"
    internal           = false
    load_balancer_type = "application"
    security_groups    = [aws_security_group.alb_sg.id]
    subnets            = aws_subnet.public_subnets[*].id
    enable_deletion_protection = false
}

resource "aws_lb_listener" "https_listener" {
    load_balancer_arn = aws_lb.lovely_alb.arn
    port              = 443
    protocol          = "HTTPS"
    ssl_policy        = "ELBSecurityPolicy-2016-08"
    certificate_arn   = aws_acm_certificate.lovely_certificate.arn

    default_action {
        type = "forward"
        target_group_arn = aws_lb_target_group.lovely_target_group.arn
    }
}

resource "aws_lb_target_group" "lovely_target_group" {
    name     = "lovely-tg"
    port     = 80
    protocol = "HTTP"
    vpc_id   = aws_vpc.main.id

    health_check {
        path = "/"
        port = "80"
    }
}

# 2. Fargate for Drupal Application
resource "aws_ecs_cluster" "lovely_ecs_cluster" {
    name = "lovely-cluster"
}

resource "aws_ecs_task_definition" "drupal_task" {
    family                   = "drupal-task"
    network_mode             = "awsvpc"
    requires_compatibilities = ["FARGATE"]
    cpu                      = "256"
    memory                   = "512"

    container_definitions = jsonencode([{
        name = "drupal-container"
        image = "drupal:latest"
        essential = true
        portMappings = [{
            containerPort = 80
            hostPort      = 80
        }]
        environment = [
            {
                name  = "DB_HOST"
                value = "db-host-url"
            },
            {
                name  = "DB_USER"
                value = "admin"
            },
            {
                name  = "DB_PASSWORD"
                value = "password"
            }
        ]
    }])

    execution_role_arn = aws_iam_role.ecs_task_execution_role.arn
}

resource "aws_ecs_service" "drupal_service" {
    name            = "drupal-service"
    cluster         = aws_ecs_cluster.lovely_ecs_cluster.id
    task_definition = aws_ecs_task_definition.drupal_task.arn
    desired_count   = 2
    launch_type     = "FARGATE"

    network_configuration {
        subnets         = aws_subnet.private_subnets[*].id
        security_groups = [aws_security_group.fargate_sg.id]
    }

    load_balancer {
        target_group_arn = aws_lb_target_group.lovely_target_group.arn
        container_name   = "drupal-container"
        container_port   = 80
    }
}

# 3. MySQL Databases (RDS)
resource "aws_db_instance" "lovely_rds" {
    allocated_storage    = 20
    engine               = "mysql"
    engine_version       = "8.0"
    instance_class       = "db.t3.micro"
    name                 = "drupaldb"
    username             = "admin"
    password             = "password"
    publicly_accessible  = false
    multi_az             = true
    skip_final_snapshot  = true

    vpc_security_group_ids = [aws_security_group.rds_sg.id]
    db_subnet_group_name   = aws_db_subnet_group.main.id

    tags = {
        Name = "Drupal-DB"
    }
}

# 4. Lambda Functions with SQS
resource "aws_sqs_queue" "stock_update_queue" {
    name                      = "stock-update-queue"
    fifo_queue                = true
    content_based_deduplication = true
}

resource "aws_lambda_function" "process_stock_update" {
    filename         = "stock_update_lambda.zip"
    function_name    = "ProcessStockUpdate"
    role             = aws_iam_role.lambda_exec_role.arn
    handler          = "index.handler"
    runtime          = "nodejs14.x"
    timeout          = 30
    memory_size      = 128

    environment {
        variables = {
            DB_HOST     = "db-host-url"
            DB_USER     = "admin"
            DB_PASSWORD = "password"
        }
    }
}

resource "aws_lambda_event_source_mapping" "sqs_lambda_trigger" {
    event_source_arn = aws_sqs_queue.stock_update_queue.arn
    function_name    = aws_lambda_function.process_stock_update.arn
}

# IAM Roles for Fargate and Lambda
resource "aws_iam_role" "ecs_task_execution_role" {
    name = "ecs-task-execution-role"

    assume_role_policy = jsonencode({
        Version = "2012-10-17",
        Statement = [{
            Action = "sts:AssumeRole",
            Effect = "Allow",
            Principal = {
                Service = "ecs-tasks.amazonaws.com"
            }
        }]
    })

    managed_policy_arns = [
        "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
    ]
}

resource "aws_iam_role" "lambda_exec_role" {
    name = "lambda-exec-role"

    assume_role_policy = jsonencode({
        Version = "2012-10-17",
        Statement = [{
            Action = "sts:AssumeRole",
            Effect = "Allow",
            Principal = {
                Service = "lambda.amazonaws.com"
            }
        }]
    })

    managed_policy_arns = [
        "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
    ]
}

# 1. Application Load Balancer Security Group
resource "aws_security_group" "alb_sg" {
    name        = "alb-sg"
    description = "Allow inbound HTTP/HTTPS traffic to the ALB"
    vpc_id      = aws_vpc.main.id

    ingress {
        from_port   = 80
        to_port     = 80
        protocol    = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
    }

    ingress {
        from_port   = 443
        to_port     = 443
        protocol    = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
    }

    egress {
        from_port   = 0
        to_port     = 0
        protocol    = "-1"
        cidr_blocks = ["0.0.0.0/0"]
    }

    tags = {
        Name = "ALB-SG"
    }
}

# 2. Fargate Service Security Group
resource "aws_security_group" "fargate_sg" {
    name        = "fargate-sg"
    description = "Allow inbound traffic from the ALB"
    vpc_id      = aws_vpc.main.id

    ingress {
        from_port       = 80
        to_port         = 80
        protocol        = "tcp"
        security_groups = [aws_security_group.alb_sg.id]
    }

    egress {
        from_port   = 0
        to_port     = 0
        protocol    = "-1"
        cidr_blocks = ["0.0.0.0/0"]
    }

    tags = {
        Name = "Fargate-SG"
    }
}

# Load Balancer for IL Region
resource "aws_lb" "il_alb" {
    name               = "il-lovely-alb"
    internal           = false
    load_balancer_type = "application"
    security_groups    = [aws_security_group.alb_sg.id]
    subnets            = aws_subnet.il_public_subnets[*].id

    enable_deletion_protection = false
}

resource "aws_lb_listener" "il_https_listener" {
    load_balancer_arn = aws_lb.il_alb.arn
    port              = 443
    protocol          = "HTTPS"
    ssl_policy        = "ELBSecurityPolicy-2016-08"
    certificate_arn   = aws_acm_certificate.lovely_certificate.arn

    default_action {
        type = "forward"
        target_group_arn = aws_lb_target_group.il_target_group.arn
    }
}

resource "aws_lb_target_group" "il_target_group" {
    name     = "il-lovely-tg"
    port     = 80
    protocol = "HTTP"
    vpc_id   = aws_vpc.il_vpc.id

    health_check {
        path = "/"
        port = "80"
    }
}

# Load Balancer for EU Region
resource "aws_lb" "eu_alb" {
    name               = "eu-lovely-alb"
    internal           = false
    load_balancer_type = "application"
    security_groups    = [aws_security_group.alb_sg.id]
    subnets            = aws_subnet.eu_public_subnets[*].id

    enable_deletion_protection = false
}

resource "aws_lb_listener" "eu_https_listener" {
    load_balancer_arn = aws_lb.eu_alb.arn
    port              = 443
    protocol          = "HTTPS"
    ssl_policy        = "ELBSecurityPolicy-2016-08"
    certificate_arn   = aws_acm_certificate.lovely_certificate.arn

    default_action {
        type = "forward"
        target_group_arn = aws_lb_target_group.eu_target_group.arn
    }
}

resource "aws_lb_target_group" "eu_target_group" {
    name     = "eu-lovely-tg"
    port     = 80
    protocol = "HTTP"
    vpc_id   = aws_vpc.eu_vpc.id

    health_check {
        path = "/"
        port = "80"
    }
}

# Load Balancer for US Region
resource "aws_lb" "us_alb" {
    name               = "us-lovely-alb"
    internal           = false
    load_balancer_type = "application"
    security_groups    = [aws_security_group.alb_sg.id]
    subnets            = aws_subnet.us_public_subnets[*].id

    enable_deletion_protection = false
}

resource "aws_lb_listener" "us_https_listener" {
    load_balancer_arn = aws_lb.us_alb.arn
    port              = 443
    protocol          = "HTTPS"
    ssl_policy        = "ELBSecurityPolicy-2016-08"
    certificate_arn   = aws_acm_certificate.lovely_certificate.arn

    default_action {
        type = "forward"
        target_group_arn = aws_lb_target_group.us_target_group.arn
    }
}

resource "aws_lb_target_group" "us_target_group" {
    name     = "us-lovely-tg"
    port     = 80
    protocol = "HTTP"
    vpc_id   = aws_vpc.us_vpc.id

    health_check {
        path = "/"
        port = "80"
    }
}

# Networking Services

# VPC for IL Region
resource "aws_vpc" "il_vpc" {
    cidr_block = "10.0.0.0/16"
    enable_dns_support = true
    enable_dns_hostnames = true
    tags = {
        Name = "IL-VPC"
    }
}

# VPC for EU Region
resource "aws_vpc" "eu_vpc" {
    cidr_block = "10.1.0.0/16"
    enable_dns_support = true
    enable_dns_hostnames = true
    tags = {
        Name = "EU-VPC"
    }
}

# VPC for US Region
resource "aws_vpc" "us_vpc" {
    cidr_block = "10.2.0.0/16"
    enable_dns_support = true
    enable_dns_hostnames = true
    tags = {
        Name = "US-VPC"
    }
}

# Subnets for IL Region
resource "aws_subnet" "il_public_subnets" {
    count = 2
    vpc_id = aws_vpc.il_vpc.id
    cidr_block = cidrsubnet(aws_vpc.il_vpc.cidr_block, 8, count.index)
    availability_zone = element(data.aws_availability_zones.available.names, count.index)
    map_public_ip_on_launch = true
    tags = {
        Name = "IL-Public-Subnet"
    }
}

resource "aws_subnet" "il_private_subnets" {
    count = 2
    vpc_id = aws_vpc.il_vpc.id
    cidr_block = cidrsubnet(aws_vpc.il_vpc.cidr_block, 8, count.index + 2)
    availability_zone = element(data.aws_availability_zones.available.names, count.index)
    map_public_ip_on_launch = false
    tags = {
        Name = "IL-Private-Subnet"
    }
}

# Subnets for EU Region
resource "aws_subnet" "eu_public_subnets" {
    count = 2
    vpc_id = aws_vpc.eu_vpc.id
    cidr_block = cidrsubnet(aws_vpc.eu_vpc.cidr_block, 8, count.index)
    availability_zone = element(data.aws_availability_zones.available.names, count.index)
    map_public_ip_on_launch = true
    tags = {
        Name = "EU-Public-Subnet"
    }
}

resource "aws_subnet" "eu_private_subnets" {
    count = 2
    vpc_id = aws_vpc.eu_vpc.id
    cidr_block = cidrsubnet(aws_vpc.eu_vpc.cidr_block, 8, count.index + 2)
    availability_zone = element(data.aws_availability_zones.available.names, count.index)
    map_public_ip_on_launch = false
    tags = {
        Name = "EU-Private-Subnet"
    }
}

# Subnets for US Region
resource "aws_subnet" "us_public_subnets" {
    count = 2
    vpc_id = aws_vpc.us_vpc.id
    cidr_block = cidrsubnet(aws_vpc.us_vpc.cidr_block, 8, count.index)
    availability_zone = element(data.aws_availability_zones.available.names, count.index)
    map_public_ip_on_launch = true
    tags = {
        Name = "US-Public-Subnet"
    }
}

resource "aws_subnet" "us_private_subnets" {
    count = 2
    vpc_id = aws_vpc.us_vpc.id
    cidr_block = cidrsubnet(aws_vpc.us_vpc.cidr_block, 8, count.index + 2)
    availability_zone = element(data.aws_availability_zones.available.names, count.index)
    map_public_ip_on_launch = false
    tags = {
        Name = "US-Private-Subnet"
    }
}

# Internet Gateway for IL Region
resource "aws_internet_gateway" "il_igw" {
    vpc_id = aws_vpc.il_vpc.id
    tags = {
        Name = "IL-Internet-Gateway"
    }
}

# Internet Gateway for EU Region
resource "aws_internet_gateway" "eu_igw" {
    vpc_id = aws_vpc.eu_vpc.id
    tags = {
        Name = "EU-Internet-Gateway"
    }
}

# Internet Gateway for US Region
resource "aws_internet_gateway" "us_igw" {
    vpc_id = aws_vpc.us_vpc.id
    tags = {
        Name = "US-Internet-Gateway"
    }
}

# Route Table for IL Public Subnets
resource "aws_route_table" "il_public_route_table" {
    vpc_id = aws_vpc.il_vpc.id
    route {
        cidr_block = "0.0.0.0/0"
        gateway_id = aws_internet_gateway.il_igw.id
    }
    tags = {
        Name = "IL-Public-Route-Table"
    }
}

resource "aws_route_table_association" "il_public_route_association" {
    count = 2
    subnet_id = element(aws_subnet.il_public_subnets[*].id, count.index)
    route_table_id = aws_route_table.il_public_route_table.id
}

# Route Table for EU Public Subnets
resource "aws_route_table" "eu_public_route_table" {
    vpc_id = aws_vpc.eu_vpc.id
    route {
        cidr_block = "0.0.0.0/0"
        gateway_id = aws_internet_gateway.eu_igw.id
    }
    tags = {
        Name = "EU-Public-Route-Table"
    }
}

resource "aws_route_table_association" "eu_public_route_association" {
    count = 2
    subnet_id = element(aws_subnet.eu_public_subnets[*].id, count.index)
    route_table_id = aws_route_table.eu_public_route_table.id
}

# Route Table for US Public Subnets
resource "aws_route_table" "us_public_route_table" {
    vpc_id = aws_vpc.us_vpc.id
    route {
        cidr_block = "0.0.0.0/0"
        gateway_id = aws_internet_gateway.us_igw.id
    }
    tags = {
        Name = "US-Public-Route-Table"
    }
}

resource "aws_route_table_association" "us_public_route_association" {
    count = 2
    subnet_id = element(aws_subnet.us_public_subnets[*].id, count.index)
    route_table_id = aws_route_table.us_public_route_table.id
}

# Data Source for AWS Availability Zones
data "aws_availability_zones" "available" {}


# Data Source for AWS Availability Zones in IL, EU, and US Regions
data "aws_availability_zones" "il_azs" {
    state = "available"
}

data "aws_availability_zones" "eu_azs" {
    state = "available"
}

data "aws_availability_zones" "us_azs" {
    state = "available"
}

# Security Group for IL Region
resource "aws_security_group" "il_sg" {
    name        = "il-sg"
    description = "Allow inbound traffic for IL region"
    vpc_id      = aws_vpc.il_vpc.id

    ingress {
        from_port   = 80
        to_port     = 80
        protocol    = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
    }

    ingress {
        from_port   = 443
        to_port     = 443
        protocol    = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
    }

    egress {
        from_port   = 0
        to_port     = 0
        protocol    = "-1"
        cidr_blocks = ["0.0.0.0/0"]
    }

    tags = {
        Name = "IL-SG"
    }
}

# Security Group for EU Region
resource "aws_security_group" "eu_sg" {
    name        = "eu-sg"
    description = "Allow inbound traffic for EU region"
    vpc_id      = aws_vpc.eu_vpc.id

    ingress {
        from_port   = 80
        to_port     = 80
        protocol    = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
    }

    ingress {
        from_port   = 443
        to_port     = 443
        protocol    = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
    }

    egress {
        from_port   = 0
        to_port     = 0
        protocol    = "-1"
        cidr_blocks = ["0.0.0.0/0"]
    }

    tags = {
        Name = "EU-SG"
    }
}

# Security Group for US Region
resource "aws_security_group" "us_sg" {
    name        = "us-sg"
    description = "Allow inbound traffic for US region"
    vpc_id      = aws_vpc.us_vpc.id

    ingress {
        from_port   = 80
        to_port     = 80
        protocol    = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
    }

    ingress {
        from_port   = 443
        to_port     = 443
        protocol    = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
    }

    egress {
        from_port   = 0
        to_port     = 0
        protocol    = "-1"
        cidr_blocks = ["0.0.0.0/0"]
    }

    tags = {
        Name = "US-SG"
    }
}

# Providers with Aliases for Each Region
provider "aws" {
    alias  = "il"
    region = "eu-west-1" # IL region
}

provider "aws" {
    alias  = "eu"
    region = "eu-central-1" # EU region
}

provider "aws" {
    alias  = "us"
    region = "us-east-1" # US region
}


# Networking Services

# VPC for IL Region
resource "aws_vpc" "il_vpc" {
    provider = aws.il
    cidr_block = "10.0.0.0/16"
    enable_dns_support = true
    enable_dns_hostnames = true
    tags = {
        Name = "IL-VPC"
    }
}

# VPC for EU Region
resource "aws_vpc" "eu_vpc" {
    provider = aws.eu
    cidr_block = "10.1.0.0/16"
    enable_dns_support = true
    enable_dns_hostnames = true
    tags = {
        Name = "EU-VPC"
    }
}

# VPC for US Region
resource "aws_vpc" "us_vpc" {
    provider = aws.us
    cidr_block = "10.2.0.0/16"
    enable_dns_support = true
    enable_dns_hostnames = true
    tags = {
        Name = "US-VPC"
    }
}

# Subnets for IL Region
resource "aws_subnet" "il_public_subnets" {
    provider = aws.il
    count = 2
    vpc_id = aws_vpc.il_vpc.id
    cidr_block = cidrsubnet(aws_vpc.il_vpc.cidr_block, 8, count.index)
    availability_zone = element(data.aws_availability_zones.available.names, count.index)
    map_public_ip_on_launch = true
    tags = {
        Name = "IL-Public-Subnet"
    }
}

# Subnets for EU Region
resource "aws_subnet" "eu_public_subnets" {
    provider = aws.eu
    count = 2
    vpc_id = aws_vpc.eu_vpc.id
    cidr_block = cidrsubnet(aws_vpc.eu_vpc.cidr_block, 8, count.index)
    availability_zone = element(data.aws_availability_zones.available.names, count.index)
    map_public_ip_on_launch = true
    tags = {
        Name = "EU-Public-Subnet"
    }
}

# Subnets for US Region
resource "aws_subnet" "us_public_subnets" {
    provider = aws.us
    count = 2
    vpc_id = aws_vpc.us_vpc.id
    cidr_block = cidrsubnet(aws_vpc.us_vpc.cidr_block, 8, count.index)
    availability_zone = element(data.aws_availability_zones.available.names, count.index)
    map_public_ip_on_launch = true
    tags = {
        Name = "US-Public-Subnet"
    }
}

# Internet Gateway for IL Region
resource "aws_internet_gateway" "il_igw" {
    provider = aws.il
    vpc_id = aws_vpc.il_vpc.id
    tags = {
        Name = "IL-Internet-Gateway"
    }
}

# Internet Gateway for EU Region
resource "aws_internet_gateway" "eu_igw" {
    provider = aws.eu
    vpc_id = aws_vpc.eu_vpc.id
    tags = {
        Name = "EU-Internet-Gateway"
    }
}

# Internet Gateway for US Region
resource "aws_internet_gateway" "us_igw" {
    provider = aws.us
    vpc_id = aws_vpc.us_vpc.id
    tags = {
        Name = "US-Internet-Gateway"
    }
}

# Update Objects with Provider Aliases

# Load Balancers for IL Region
resource "aws_lb" "il_alb" {
    provider = aws.il
    name               = "il-lovely-alb"
    internal           = false
    load_balancer_type = "application"
    security_groups    = [aws_security_group.il_sg.id]
    subnets            = aws_subnet.il_public_subnets[*].id

    enable_deletion_protection = false
}

# Load Balancers for EU Region
resource "aws_lb" "eu_alb" {
    provider = aws.eu
    name               = "eu-lovely-alb"
    internal           = false
    load_balancer_type = "application"
    security_groups    = [aws_security_group.eu_sg.id]
    subnets            = aws_subnet.eu_public_subnets[*].id

    enable_deletion_protection = false
}

# Load Balancers for US Region
resource "aws_lb" "us_alb" {
    provider = aws.us
    name               = "us-lovely-alb"
    internal           = false
    load_balancer_type = "application"
    security_groups    = [aws_security_group.us_sg.id]
    subnets            = aws_subnet.us_public_subnets[*].id

    enable_deletion_protection = false
}

# RDS for IL Region
resource "aws_db_instance" "il_rds" {
    provider = aws.il
    allocated_storage    = 20
    engine               = "mysql"
    engine_version       = "8.0"
    instance_class       = "db.t3.micro"
    name                 = "il-drupaldb"
    username             = "admin"
    password             = "password"
    publicly_accessible  = false
    multi_az             = true
    skip_final_snapshot  = true

    vpc_security_group_ids = [aws_security_group.il_sg.id]
    db_subnet_group_name   = aws_db_subnet_group.il_subnet_group.name

    tags = {
        Name = "IL-Drupal-DB"
    }
}

# RDS for EU Region
resource "aws_db_instance" "eu_rds" {
    provider = aws.eu
    allocated_storage    = 20
    engine               = "mysql"
    engine_version       = "8.0"
    instance_class       = "db.t3.micro"
    name                 = "eu-drupaldb"
    username             = "admin"
    password             = "password"
    publicly_accessible  = false
    multi_az             = true
    skip_final_snapshot  = true

    vpc_security_group_ids = [aws_security_group.eu_sg.id]
    db_subnet_group_name   = aws_db_subnet_group.eu_subnet_group.name

    tags = {
        Name = "EU-Drupal-DB"
    }
}

# RDS for US Region
resource "aws_db_instance" "us_rds" {
    provider = aws.us
    allocated_storage    = 20
    engine               = "mysql"
    engine_version       = "8.0"
    instance_class       = "db.t3.micro"
    name                 = "us-drupaldb"
    username             = "admin"
    password             = "password"
    publicly_accessible  = false
    multi_az             = true
    skip_final_snapshot  = true

    vpc_security_group_ids = [aws_security_group.us_sg.id]
    db_subnet_group_name   = aws_db_subnet_group.us_subnet_group.name

    tags = {
        Name = "US-Drupal-DB"
    }
}

# ECS Cluster and Fargate Services for IL, EU, and US Regions

# ECS Cluster for IL Region
resource "aws_ecs_cluster" "il_ecs_cluster" {
    provider = aws.il
    name = "il-lovely-cluster"
}

# ECS Cluster for EU Region
resource "aws_ecs_cluster" "eu_ecs_cluster" {
    provider = aws.eu
    name = "eu-lovely-cluster"
}

# ECS Cluster for US Region
resource "aws_ecs_cluster" "us_ecs_cluster" {
    provider = aws.us
    name = "us-lovely-cluster"
}

# Fargate Task Definition for Drupal Containers (IL)
resource "aws_ecs_task_definition" "il_drupal_task" {
    provider = aws.il
    family                   = "il-drupal-task"
    network_mode             = "awsvpc"
    requires_compatibilities = ["FARGATE"]
    cpu                      = "256"
    memory                   = "512"

    container_definitions = jsonencode([{
        name = "drupal-container"
        image = "drupal:latest"
        essential = true
        portMappings = [{
            containerPort = 80
            hostPort      = 80
        }]
        environment = [
            {
                name  = "DB_HOST"
                value = "db-host-url"
            },
            {
                name  = "DB_USER"
                value = "admin"
            },
            {
                name  = "DB_PASSWORD"
                value = "password"
            }
        ]
    }])

    execution_role_arn = aws_iam_role.ecs_task_execution_role.arn
}

# Fargate Task Definition for Drupal Containers (EU)
resource "aws_ecs_task_definition" "eu_drupal_task" {
    provider = aws.eu
    family                   = "eu-drupal-task"
    network_mode             = "awsvpc"
    requires_compatibilities = ["FARGATE"]
    cpu                      = "256"
    memory                   = "512"

    container_definitions = jsonencode([{
        name = "drupal-container"
        image = "drupal:latest"
        essential = true
        portMappings = [{
            containerPort = 80
            hostPort      = 80
        }]
        environment = [
            {
                name  = "DB_HOST"
                value = "db-host-url"
            },
            {
                name  = "DB_USER"
                value = "admin"
            },
            {
                name  = "DB_PASSWORD"
                value = "password"
            }
        ]
    }])

    execution_role_arn = aws_iam_role.ecs_task_execution_role.arn
}

# Fargate Task Definition for Drupal Containers (US)
resource "aws_ecs_task_definition" "us_drupal_task" {
    provider = aws.us
    family                   = "us-drupal-task"
    network_mode             = "awsvpc"
    requires_compatibilities = ["FARGATE"]
    cpu                      = "256"
    memory                   = "512"

    container_definitions = jsonencode([{
        name = "drupal-container"
        image = "drupal:latest"
        essential = true
        portMappings = [{
            containerPort = 80
            hostPort      = 80
        }]
        environment = [
            {
                name  = "DB_HOST"
                value = "db-host-url"
            },
            {
                name  = "DB_USER"
                value = "admin"
            },
            {
                name  = "DB_PASSWORD"
                value = "password"
            }
        ]
    }])

    execution_role_arn = aws_iam_role.ecs_task_execution_role.arn
}
